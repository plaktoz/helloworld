spring:
  application:
    name: todoistapp

  datasource:
    url: jdbc:mysql://mysql:3306/todoist?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
    username: ${SPRING_DATASOURCE_USERNAME:todo}
    password: ${SPRING_DATASOURCE_PASSWORD:todo_pwd}
  jpa:
    hibernate:
      ddl-auto: update
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:redis}
      port: ${SPRING_DATA_REDIS_PORT:6379}
    mongodb:
      uri: mongodb://mongoadmin:mongopwd@mongo:27017/todoist?authSource=admin

management:
  endpoints.web.exposure.include: health,info,metrics,prometheus

resilience4j:
  circuitbreaker:
    instances:
      hostedApi:
        sliding-window-type: COUNT_BASED
        sliding-window-size: 20            # recent calls considered
        permitted-number-of-calls-in-half-open-state: 3
        failure-rate-threshold: 50         # % failures to open the breaker
        wait-duration-in-open-state: 30s   # how long to stay open before half-open
        record-exceptions:
          - java.io.IOException
          - org.springframework.web.reactive.function.client.WebClientRequestException
          - org.springframework.web.reactive.function.client.WebClientResponseException
  timelimiter:
    instances:
      hostedApi:
        timeout-duration: 2s               # fail fast if slower than 2s
        cancel-running-future: true
  retry:
    instances:
      hostedApi:
        max-attempts: 3
        wait-duration: 200ms               # backoff between attempts
        retry-exceptions:
          - org.springframework.web.reactive.function.client.WebClientRequestException
          - java.io.IOException
  bulkhead:
    instances:
      hostedApi:
        max-concurrent-calls: 50
        max-wait-duration: 0               # 0 = fail immediately when saturated


app:
  webclient:
    callapp2: ${APP_WEBCLIENT_CALLAPP2:http://adminapp:8080/hello}
  redis:
    enabled: true