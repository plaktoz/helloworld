#version: "3.8"

services:
  # WEB TIER (Public)
  # TODO Docker Compose Watch to autoreload changes
  web:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/static:/usr/share/nginx/html
      - ./infra/nginx/nginx-http.conf:/etc/nginx/nginx.conf
      - ./infra/openssl/certs:/etc/ssl/certs
    networks:
      - public_network  # No DB access!
      - app_network
    depends_on:
      adminapp:
        condition: service_started
      todoistapp:
        condition: service_started
      keycloak:
        condition: service_healthy
      cert-generator:
        condition: service_started

  cert-generator:
    image: alpine:latest
    container_name: cert_generator
    volumes:
      - ./infra/openssl/certs:/certs
      - ./infra/openssl/generate-certs.sh:/generate-certs.sh
    command: /generate-certs.sh
    restart: "no"

  # =========================
  # Datastores (internal)
  # =========================
  mysql:
    image: mysql:8.4
    container_name: mysql
    environment:
      MYSQL_DATABASE: todoist
      MYSQL_USER: todo
      MYSQL_PASSWORD: todo_pwd
      MYSQL_ROOT_PASSWORD: root_pwd
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    #command: --default-authentication-plugin=caching_sha2_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql
      # run separate sql e.g. 01-keycloak.sql
      - ./infra/mysql-init.d:/docker-entrypoint-initdb.d:ro
    networks: [ database_network ]
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u$$MYSQL_USER -p$$MYSQL_PASSWORD --silent" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    # Uncomment only if you want host access for debugging
    ports:
      - "3306:3306"

  redis:
    image: redis:7.2
    container_name: redis
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - redis_data:/data
    networks: [ database_network ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 20
    # Uncomment only if you want host access for debugging
    ports:
      - "6379:6379"

  # =========================
  # Kafka + Zookeeper
  # =========================
  # Single-broker Kafka in KRaft mode (no Zookeeper)
  kafka:
    image: apache/kafka:3.8.0
    container_name: kafka
    networks: [ app_network ]
    ports:
      - "9092:9092"      # inside-docker clients via kafka:9092
      - "29092:29092"    # host access via localhost:29092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # Kafka 3.8+ creates cluster ID automatically on first start. For older versions, you'd format storage.

  # Helper script will run in the same container
  kafka-init:
    image: apache/kafka:3.8.0
    container_name: kafka-init
    networks: [app_network]
    volumes:
      - ./infra/kafka-init.sh:/kafka-init.sh
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      while ! /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list; do
        echo 'Waiting for Kafka to be ready...'
        sleep 5
      done
      /kafka-init.sh
      exit 0
      "
    restart: on-failure

  # =========================
  # Apps
  # =========================
  adminapp:
    image: adminapp-image
    container_name: adminapp
    build:
      context: ./backend/adminapp
    networks:
      - database_network
      - app_network
    expose:
      - "8080"       # internal-only
      - "5006:5006"  # expose for debugging
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    environment:
      # --- JDBC ---
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/todoist?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: todo
      SPRING_DATASOURCE_PASSWORD: todo_pwd
      # --- Redis ---
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: "6379"
      # Optional: JPA/Hibernate
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect

  todoistapp:
    image: todoistapp-image
    container_name: todoistapp
    build:
      context: ./backend/todoistapp
    ports:
      - "8080:8080"  # exposed to host
      - "5005:5005"  # expose for debugging
    networks:
      - database_network
      - app_network
    depends_on:
      adminapp:
        condition: service_started
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    environment:
      # --- If this app also needs DB/Redis, wire it too ---
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/todoist?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: todo
      SPRING_DATASOURCE_PASSWORD: todo_pwd
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: "6379"
      # --- Internal call to adminapp ---
      APP_WEBCLIENT_CALLAPP2: http://adminapp:8080/hello
    healthcheck:
      # not working even thought this will exit with 0
      test: ["CMD", "curl --fail --silent http://localhost:8080/actuator/health | grep UP >/dev/null;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

  # =========================
  # Identity (Keycloak)
  # =========================
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.4
    container_name: keycloak
    command: start-dev --http-port=8080 --hostname-strict=false
      #--http-relative-path=/auth
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      # ---- use MySQL ----
      KC_DB: mysql
      KC_DB_URL: jdbc:mysql://mysql:3306/keycloakdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      KC_DB_USERNAME: keycloakdbuser
      KC_DB_PASSWORD: keycloakdbuserpwd
      KC_HEALTH_ENABLED: "true"
      KC_HTTP_RELATIVE_PATH: /auth
      KC_PROXY_HEADERS: "xforwarded"
#      KC_HOSTNAME_PORT: "8080"
#      KC_HTTP_ENABLED: "true"
#      KC_HOSTNAME_STRICT: "false"
#      KC_HOSTNAME_DEBUG: "false"
      KC_LOG_LEVEL: "INFO"
    networks:
      - app_network
      - public_network
      - database_network   # <-- add this so Keycloak can reach mysql
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 30s


  # ---- MongoDB ----
  mongo:
    image: mongo:7.0
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongoadmin
      MONGO_INITDB_ROOT_PASSWORD: mongopwd
      MONGO_INITDB_DATABASE: chat
    # volumes:
    #   - mongo_data:/data/db
    networks: [ database_network ]
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet 'mongodb://127.0.0.1:27017' --eval 'db.runCommand({ ping: 1 }).ok' | grep 1 >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 20s
    ports:
      - "27017:27017"

networks:
  public_network:    # Web tier only (exposes ports)
    driver: bridge
  app_network:   # App tier only (no inbound access)
    driver: bridge
    # internal: true # uncomment to allow public access
  database_network:  # DB tier only (app-only access)
    driver: bridge
    # internal: true # uncomment to allow public access

volumes:
  mysql_data:
  redis_data:
